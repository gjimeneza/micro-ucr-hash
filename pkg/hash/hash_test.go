package hash_test

import (
	"testing"
	"time"

	"github.com/gjimeneza/micro-ucr-hash/pkg/hash"
)

// TestHashArea checks System implementation and speed while obtaining a valid Nonce.
func TestHashArea(t *testing.T) {
	testPayload := hash.Payload{0x39, 0x7d, 0x9f, 0x2f, 0x40, 0xca, 0x9e, 0x6c, 0x6b, 0x1f, 0x33, 0x24}
	testTarget := byte(10)

	ha := hash.HashArea{}

	start := time.Now()
	nonce, _ := ha.Sistema(true, testTarget, testPayload)
	duration := time.Since(start)

	t.Logf("Elapsed time: %v", duration)
	t.Logf("Generated Nonce: [%# x]\n", nonce[:])
}

// TestHashSpeed checks System implementation and speed while obtaining a valid Nonce.
func TestHashSpeed(t *testing.T) {
	testPayload := hash.Payload{0x39, 0x7d, 0x9f, 0x2f, 0x40, 0xca, 0x9e, 0x6c, 0x6b, 0x1f, 0x33, 0x24}
	testTarget := byte(10)

	hs := hash.HashSpeed{}

	start := time.Now()
	nonce, _ := hs.Sistema(true, testTarget, testPayload)
	duration := time.Since(start)

	t.Logf("Elapsed time: %v", duration)
	t.Logf("Generated Nonce: [%# x]\n", nonce[:])
}

// TestHashSpeedMicroHashUcr checks the hashing function implementation to see
// if the generated hashOutput is correct using a predetermined Bloque - HashOutput map
// with correct values.
func TestHashSpeedMicroHashUcr(t *testing.T) {
	payloadHashOutputMap := map[hash.Bloque]hash.HashOutput{
		{0x39, 0x7d, 0x9f, 0x2f, 0x40, 0xca, 0x9e, 0x6c, 0x6b, 0x1f, 0x33, 0x24, 0xfd, 0xed, 0x87, 0x3c}: {0xf1, 0x89, 0x73},
		{0xed, 0x18, 0xbe, 0x0f, 0x98, 0x4a, 0xe0, 0xe2, 0xe3, 0x12, 0x8e, 0xfe, 0x0f, 0xa2, 0x34, 0x91}: {0x7a, 0x19, 0x6e},
		{0x88, 0x55, 0xc7, 0xac, 0x8b, 0x73, 0xf8, 0xf2, 0x97, 0x01, 0xef, 0xf1, 0xba, 0x0f, 0x98, 0xb3}: {0x97, 0xe9, 0x57},
		{0x5b, 0x71, 0xfd, 0x32, 0xbd, 0x79, 0xb8, 0x72, 0xdb, 0xe6, 0x1c, 0xf7, 0xc0, 0x09, 0x65, 0x18}: {0xce, 0x59, 0x73},
		{0xd0, 0xe1, 0xaa, 0xb6, 0xae, 0x1e, 0xa2, 0xd1, 0x11, 0x5d, 0xd7, 0x16, 0x11, 0x9f, 0x29, 0x2c}: {0x55, 0xc9, 0x91},
		{0xeb, 0xad, 0x50, 0x90, 0x38, 0x43, 0xf9, 0xc9, 0xaa, 0xad, 0x6f, 0x64, 0xdf, 0xd3, 0x6f, 0xa3}: {0xf0, 0x79, 0x95},
		{0x87, 0x3f, 0x33, 0xfa, 0x4a, 0x96, 0xd3, 0x41, 0xa4, 0xa1, 0x6e, 0xa4, 0x95, 0x91, 0xa7, 0xec}: {0x22, 0x99, 0x9b},
		{0x26, 0x6e, 0x30, 0xf5, 0xe8, 0x32, 0xd7, 0x54, 0x76, 0x5e, 0xb5, 0x81, 0x70, 0x43, 0xce, 0x8b}: {0x47, 0xe9, 0xf3},
		{0xfe, 0x35, 0x36, 0xdf, 0x50, 0x49, 0x85, 0x45, 0x24, 0x02, 0x12, 0xde, 0xc6, 0x09, 0x59, 0x2a}: {0xf2, 0x99, 0xbe},
		{0x73, 0xa9, 0xde, 0xbe, 0x6a, 0xf9, 0xc9, 0x5e, 0x9f, 0x05, 0x2d, 0x59, 0x53, 0xdb, 0xd6, 0x5c}: {0xbe, 0x59, 0xc0},
	}

	hs := hash.HashSpeed{}

	for k, v := range payloadHashOutputMap {
		hashOutput := hs.MicroHashUcr(k)
		if hashOutput != v {
			t.Fatalf("HashOutputs are not equal, expected [%# x], got [%# x]", v, hashOutput)
		}
	}
}

// TestHashAreaMicroHashUcr checks the hashing function implementation to see if
// the generated hashOutput is correct using a predetermined Bloque - HashOutput map
// with correct values.
func TestHashAreaMicroHashUcr(t *testing.T) {
	payloadHashOutputMap := map[hash.Bloque]hash.HashOutput{
		{0x39, 0x7d, 0x9f, 0x2f, 0x40, 0xca, 0x9e, 0x6c, 0x6b, 0x1f, 0x33, 0x24, 0xfd, 0xed, 0x87, 0x3c}: {0xf1, 0x89, 0x73},
		{0xed, 0x18, 0xbe, 0x0f, 0x98, 0x4a, 0xe0, 0xe2, 0xe3, 0x12, 0x8e, 0xfe, 0x0f, 0xa2, 0x34, 0x91}: {0x7a, 0x19, 0x6e},
		{0x88, 0x55, 0xc7, 0xac, 0x8b, 0x73, 0xf8, 0xf2, 0x97, 0x01, 0xef, 0xf1, 0xba, 0x0f, 0x98, 0xb3}: {0x97, 0xe9, 0x57},
		{0x5b, 0x71, 0xfd, 0x32, 0xbd, 0x79, 0xb8, 0x72, 0xdb, 0xe6, 0x1c, 0xf7, 0xc0, 0x09, 0x65, 0x18}: {0xce, 0x59, 0x73},
		{0xd0, 0xe1, 0xaa, 0xb6, 0xae, 0x1e, 0xa2, 0xd1, 0x11, 0x5d, 0xd7, 0x16, 0x11, 0x9f, 0x29, 0x2c}: {0x55, 0xc9, 0x91},
		{0xeb, 0xad, 0x50, 0x90, 0x38, 0x43, 0xf9, 0xc9, 0xaa, 0xad, 0x6f, 0x64, 0xdf, 0xd3, 0x6f, 0xa3}: {0xf0, 0x79, 0x95},
		{0x87, 0x3f, 0x33, 0xfa, 0x4a, 0x96, 0xd3, 0x41, 0xa4, 0xa1, 0x6e, 0xa4, 0x95, 0x91, 0xa7, 0xec}: {0x22, 0x99, 0x9b},
		{0x26, 0x6e, 0x30, 0xf5, 0xe8, 0x32, 0xd7, 0x54, 0x76, 0x5e, 0xb5, 0x81, 0x70, 0x43, 0xce, 0x8b}: {0x47, 0xe9, 0xf3},
		{0xfe, 0x35, 0x36, 0xdf, 0x50, 0x49, 0x85, 0x45, 0x24, 0x02, 0x12, 0xde, 0xc6, 0x09, 0x59, 0x2a}: {0xf2, 0x99, 0xbe},
		{0x73, 0xa9, 0xde, 0xbe, 0x6a, 0xf9, 0xc9, 0x5e, 0x9f, 0x05, 0x2d, 0x59, 0x53, 0xdb, 0xd6, 0x5c}: {0xbe, 0x59, 0xc0},
	}

	ha := hash.HashArea{}

	for k, v := range payloadHashOutputMap {
		hashOutput := ha.MicroHashUcr(k)
		if hashOutput != v {
			t.Fatalf("HashOutputs are not equal, expected [%# x], got [%# x]", v, hashOutput)
		}
	}
}
